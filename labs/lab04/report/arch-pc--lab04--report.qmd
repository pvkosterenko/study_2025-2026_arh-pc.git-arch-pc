---
## Author
author:
  name: Костеренко Полина
  studID: 1032255196
  group: НПИбд-01-25
  email: kosterenkopolina07@mail.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      city: Москва
      address: ул. Миклухо-Маклая, д. 5к2

## Title
title: "Отчет по лабораторной работе №4"

---

# 1 Цель работы

Освоение процедуры компиляции и сборки программ, написанных на ассемблере NASM.

# 2 Порядок выполнения лабораторной работы

# 2.1 Программа Hello world!
 Создадим каталог для работы с программами на языке ассемблера NASM и перейдем в перейдем в созданный каталог [рис. @fig-001]
 
![1](./image/1.png){#fig-001 width=90%}

 Создадим текстовый файл c именем hello.asm и проверим его наличие[рис. @fig-002]
 
![2](./image/2.png){#fig-002 width=90%}

Откроем этот файл с помощью любого текстового редактора[рис. @fig-003]

![3](./image/3.png){#fig-003 width=90%}

 Введем в него следующий текст [рис. @fig-004]

![4](./image/4.png){#fig-004 width=90%}

# 2.2 Транслятор NASM

 Для компиляции приведённого выше текста программы «Hello World» необходимо написать nasm -f elf hello.asm и проверим объектный файл был создан [рис. @fig-005]

![5](./image/5.png){#fig-005 width=90%}

# 2.3 Расширенный синтаксис командной строки NASM 

 Выполним следующую команду nasm -o obj.o -f elf -g -l list.lst hello.asm и проверим его наличие в каталоге[рис. @fig-006]

![6](./image/6.png){#fig-006 width=90%}

# 2.4 Компоновщик LD

 Объектный файл передадим на обработку компоновщику и проверим [рис. @fig-007]

![7](./image/7.png){#fig-007 width=90%}
 
 Выполним следующую команду ld -m elf_i386 obj.o -o main и проверим[рис. @fig-008]

![8](./image/8.png){#fig-008 width=90%}

# 2.5 Запуск исполняемого файлa

 Наберем в командной строке ./hello и проверим что выводит [рис. @fig-009]

![9](./image/9.png){#fig-009 width=90%}

# 3 Задание для самостоятельной работы

3.1 1 Задание
 В каталоге ~/work/arch-pc/lab04 с помощью команды cp создайте копию файла hello.asm с именем lab4.asm. 
 Скопируем в ~/work/arch-pc/lab04 файлы hello.asm с именем lab4.asm и проверяем каталог [ рис. @fig-010]

![10](./image/10.png){#fig-010 width=90%}

3.2 2 Задание
С помощью любого текстового редактора внесите изменения в текст программы в файле lab4.asm так, чтобы вместо Hello world! на экран выводилась строка с вашими фамилией и именем
 С помощью gedit открываем файл [ рис. @fig-011]

![11](./image/11.png){#fig-011 width=90%}

Редактируем файл [ рис. @fig-012]

![12](./image/12.png){#fig-012 width=90%}

3.3 3 Задание
Оттранслируйте полученный текст программы lab4.asm в объектный файл. Выполните компоновку объектного файла и запустите получившийся исполняемый файл.
Оттранслируем полученный текст программы lab4.asm в объектный файл и проверим файл[ рис. @fig-013]

![13](./image/13.png){#fig-013 width=90%}

Выполним компоновку объектного файла [ рис. @fig-014]

![14](./image/14.png){#fig-014 width=90%}

Запустим получившийся исполняемый файл  [ рис. @fig-015]

![15](./image/15.png){#fig-015 width=90%}

3.4 4 Задание
4. Скопируйте файлы hello.asm и lab4.asm в Ваш локальный репозиторий в каталог ~/work/study/2023-2024/"Архитектура компьютера"/arch-pc/labs/lab04/.
Загрузите файлы на Github.

 Скопируем и проверим файлы hello.asm и lab4.asm в локальный репозиторий в каталог ~/work/study/2023-2024/«Arhitektura comp»/arch-pc/labs/lab04/ [ рис. @fig-016]

![16](./image/16.png){#fig-016 width=90%}

Проверим [ рис. @fig-017]

![17](./image/17.png){#fig-017 width=90%}

Загрузим файлы на Github [ рис. @fig-018]

![18](./image/18.png){#fig-018 width=90%}

Проверяем в Github загруженные файлы [ рис. @fig-019]

![19](./image/19.png){#fig-019 width=90%}

#  3.5 Выводы

В рамках лабораторной работы были успешно освоены ключевые этапы разработки программ на ассемблере NASM: создание исходного кода, трансляция с помощью компилятора NASM, компоновка объектных файлов через компоновщик ld и выполнение результирующих исполняемых файлов. В процессе изучения были рассмотрены основные ассемблерные директивы и механизмы системных вызовов ОС Linux для реализации операций ввода-вывода. Приобретённые компетенции позволяют разрабатывать низкоуровневые приложения с прямым управлением системными ресурсами.




 
 
 
::: {#refs}
:::
